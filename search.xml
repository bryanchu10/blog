<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>鼠年全馬鐵人挑戰 01：曾經困擾我的 float 問題</title>
    <url>/blog/2020/03/22/2020-03-22-float-and-clearfix/</url>
    <content><![CDATA[<p>六角學院最近的一次課程更新，正式從基礎課程就開始介紹 flex 排版。原本就知道現在 flex 排版已經取得主流地位了，但是看到六角課程更新，還是讓我有一種 float 排版逐漸成為歷史遺跡的感覺，也回想起學習 float 排版的過程中踩到的那些坑，決定在告別 float 之前，把曾經困擾我的 float 問題記錄下來。</p>
<span id="more"></span>

<h3 id="元素設定-float-前後的表現"><a href="#元素設定-float-前後的表現" class="headerlink" title="元素設定 float 前後的表現"></a>元素設定 float 前後的表現</h3><ul>
<li>區塊元素佔據的橫向空間</li>
</ul>
<p>因為太常使用 float 了，所以很容易忘記，原本區塊元素（block element）會佔據目前身處的容器中高度範圍內所有的橫向空間。即使對區塊元素設定 width，區塊元素還是會占滿整個元素空間。設定 width，只會影響到它的 content 寬度，並沒有辦法使其不佔據所有橫向空間。如果在同一層級再擺一個元素，因為區塊元素已經佔據自身高度內的橫向空間，新元素位置會在這個區塊元素的下一行。</p>
<p>使用了 float 之後，元素佔據的橫向空間則會是 content 寬度 + padding 寬度 + border 寬度 + margin 寬度。</p>
<ul>
<li>行內元素的 display 設定</li>
</ul>
<p>行內元素（inline element）原本設定 width、height、margin-top、margin-bottom 不會產生效果，padding-top 與 padding-bottom 沒有辦法撐開空間。但是 float 之後會帶有區塊元素的特性，這時候上述無法發揮作用的屬性都可以運作。</p>
<p>這邊容易忘記的是，因為 float 讓行內元素帶有區塊元素的特性，所以在程式碼撰寫上，如果有將行內元素轉成區塊元素的需求，又剛好已經有 float 設定，就不用再寫 <code>display: block</code> 了。</p>
<h3 id="ul-li-的清除浮動問題"><a href="#ul-li-的清除浮動問題" class="headerlink" title="ul li 的清除浮動問題"></a>ul li 的清除浮動問題</h3><p>考慮一個簡單的<a href="https://codepen.io/bryanchu10/pen/yLNxLOY">網頁架構</a>，在這個 CodePen 中，因為 h1 和 ul 都使用了 float，所以在 h1 和 ul 的父層元素 header 內部結尾處要清除浮動，確定 header 內部的浮動現象不會影響到 header 之外。在這邊使用偽元素的方式，在 header 標籤內加入 clearfix 這個類別選擇器後，header 的最後會產生一個可以清除浮動的偽元素。</p>
<ul>
<li>以浮動元素包裹浮動元素</li>
</ul>
<p>注意 header 內右側的連結列，不只是 ul 有使用 float，li 也有使用 float，於是產生的一個疑問：為甚麼不需要在 ul 內部結尾清除浮動，來避免 li 的浮動現象超出 ul 呢？</p>
<p>原因是當父元素也使用了 float 的時候，子元素的 float 現象就不會影響到父元素之外，有人稱這個現象為「以浮制浮」。</p>
<ul>
<li>ul 架構規範</li>
</ul>
<p>在 <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/ul">MDN web docs</a> ，ul 允許的內容是 </p>
<blockquote>
<p>Zero or more <code>&lt;li&gt;</code>, <code>&lt;script&gt;</code> and <code>&lt;template&gt;</code> elements.</p>
</blockquote>
<p>所以如果是這樣的架構</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>連結一<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>連結二<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>連結三<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>連結四<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;clearfix&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>以規範來說是有問題的。雖然我在注意到這個規範之前都是這樣寫，也沒有出過問題。不過因為這個原因，後來如果需要在 ul 清除浮動時，就改成用偽元素置入清除浮動的方式來迴避違規範了，例如 CodePen 中的 HTML 第 12-17 行。</p>
]]></content>
      <categories>
        <category>鼠年全馬鐵人挑戰</category>
      </categories>
      <tags>
        <tag>w3HexSchool</tag>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>鼠年全馬鐵人挑戰 02：容易誤解的 position 特性</title>
    <url>/blog/2020/03/29/2020-03-29-position/</url>
    <content><![CDATA[<p>相對定位與絕對定位是網頁排版中常常用到的技巧之一，特別是在視覺上出現區塊內元素橫跨區塊元素的設計，例如這個 <a href="https://codepen.io/bryanchu10/pen/oNXJOKP">CodePen</a> 。在使用上，<code>position: relative;</code> 和 <code>position: absolute;</code> 經常成對出現，但也因此造成一些常見的誤解。</p>
<span id="more"></span>

<h3 id="position-absolute-一定要和-position-relative-搭配嗎？"><a href="#position-absolute-一定要和-position-relative-搭配嗎？" class="headerlink" title="position: absolute; 一定要和 position: relative; 搭配嗎？"></a>position: absolute; 一定要和 position: relative; 搭配嗎？</h3><p>在 <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/position">MDN web docs</a> 關於絕對定位有這麼一段敘述：</p>
<blockquote>
<p>The absolutely positioned element is positioned relative to its nearest positioned ancestor (i.e., the nearest ancestor that is not static).</p>
</blockquote>
<p>絕對定位的元素以最靠近它，並且 position 過的父元素來相對定位。甚麼是 position 過的父元素（positioned ancestor）呢？MDN web docs 用括弧特別說明，就是那些最靠近並且「不是 static 」的父元素。<code>static</code> 是元素預設的 position 屬性值，只要元素的 position 是預設值以外的設定，包括：<code>relative</code>、<code>absolute</code>、<code>sticky</code>、<code>fixed</code>，那麼它的子元素就可以它為定位的基準點。</p>
<p>一個常見的網頁撰寫錯誤，發生在連續性的定位關係結構。考慮以下的情況：子元素 B 以父元素 A 為基準進行絕對定位， 子元素 C 又拿元素 B 當基準來定位。第一組 A 與 B 的關係設定 A 的 position 為 <code>relative</code>，B 為 <code>absolute</code>：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.A</span>&#123;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.B</span>&#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>接著第二組 B 與 C 的關係，如果認為 <code>absolute</code> 和 <code>relative</code> 一定要成對出現，經常會發生這樣的錯誤：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.A</span>&#123;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.B</span>&#123;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.C</span>&#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果知道同一個元素的屬性值，較後撰寫的內容會覆蓋較前撰寫的內容，但是沒有絕對定位父元素對象的概念，則可能寫出這樣的設定：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;A&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;B&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;b&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;c&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.A</span>&#123;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.B</span>&#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.b</span>&#123;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.c</span>&#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>也就是為了回避覆蓋屬性值的問題，多使用了一個區塊元素來完成定位需求。</p>
<p>但是以上的寫法都起因於以為 <code>position: absolute;</code> 一定要和 <code>position: relative;</code> 搭配，如果瞭解上述可以作為絕對定位對象的標準，就不會發生這樣的狀況了。正確的寫法如下：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.A</span>&#123;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.B</span>&#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.C</span>&#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="position-relative-本身的作用"><a href="#position-relative-本身的作用" class="headerlink" title="position: relative; 本身的作用"></a>position: relative; 本身的作用</h3><p>排版面對的情形的通常是一個脫離一般排版的元素以一個正常排版的元素位定位基準，<code>relative</code> 這個屬性值，不像 <code>absolute</code> 或是 <code>fixed</code> 會使設定的元素本身脫離一般排版，所以才會經常和設定了 <code>position: absolute;</code> 的子元素搭配。雖然設定了 <code>position: relative;</code> 的元素不會脫離一般排版，但是仍然有不同於預設值的狀態。</p>
<p>最明顯的就是 <code>top</code>、<code>right</code>、<code>bottom</code>、<code>left</code> 這四個屬性變得可以運作。在設定了 <code>position: relative;</code> 的元素「本身」設定前述的四個屬性，元素會以正常排版之下所在的位置為基準進行偏移。不過建議如果有調整元素位置的需求，儘量不要使用這種方式，原因是因為元素所佔據的空間和視覺上所在的位置不一致，會使得排版管理上變得複雜。</p>
<h3 id="position-absolute-對於元素佔據空間影響"><a href="#position-absolute-對於元素佔據空間影響" class="headerlink" title="position: absolute; 對於元素佔據空間影響"></a>position: absolute; 對於元素佔據空間影響</h3><p><code>position: absolute;</code> 對於元素本身佔據空間產生的影響和<a href="https://bryanchu10.github.io/blog/2020/03/22/2020-03-22-%20float-and-clearfix/">上一篇文章</a>提到的 <code>float</code> 作用類似：</p>
<ul>
<li>區塊元素佔據的橫向空間</li>
</ul>
<p>使用了 <code>position: absolute;</code> 之後，元素佔據的橫向空間會是 content 寬度 + padding 寬度 + border 寬度 + margin 寬度。不過要注意的是，這邊所說的「佔據空間」，是對於元素「本身」來說，而不是指和其它元素互相爭奪空間的關係來說。設定了 position: absolute; 之後，元素因為脫離了一般排版，不會和其它元素在平面空間上產生推擠行為，處在同一平面位置的兩個元素，會在垂直方向上互相覆蓋。</p>
<ul>
<li>行內元素的設定</li>
</ul>
<p>行內元素（inline element）原本設定 <code>width</code>、<code>height</code>、<code>margin-top</code>、<code>margin-bottom</code> 不會產生效果，<code>padding-top</code> 與 <code>padding-bottom</code> 沒有辦法撐開空間。但是設定了 <code>position: absolute;</code> 之後會帶有區塊元素的特性，這時候上述無法發揮作用的屬性都可以運作。和其它元素的空間關係則和上述「區塊元素佔據的橫向空間」說明相同。</p>
<p>這邊容易忘記的是，因為 <code>position: absolute;</code> 讓行內元素帶有區塊元素的特性，所以在程式碼撰寫上，如果有將行內元素轉成區塊元素的需求，又剛好已經有 <code>position: absolute;</code> 設定，就不用再寫 <code>display: block;</code> 了。</p>
]]></content>
      <categories>
        <category>鼠年全馬鐵人挑戰</category>
      </categories>
      <tags>
        <tag>w3HexSchool</tag>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>鼠年全馬鐵人挑戰 03：網頁橫幅文字的半透明背景問題</title>
    <url>/blog/2020/04/05/2020-04-05-banner-text/</url>
    <content><![CDATA[<p>之前在練習網頁排版的時候，碰過一個小問題。雖然是小問題，但當時卻花了不少時間解決。</p>
<p>例如像是這樣子的橫幅，該如何讓文字部分背景呈現半透明效果呢？</p>
<p><img src="https://firebasestorage.googleapis.com/v0/b/blog-f0135.appspot.com/o/2020-04-05-banner-text-2.png?alt=media&token=cf651aa5-db54-4a52-830b-059c23b55564" alt="Alt text"></p>
<span id="more"></span>

<p>文字部分是用 h1 標籤撰寫，我第一個想到的作法是對 h1 設定 opacity。結果</p>
<p><img src="https://firebasestorage.googleapis.com/v0/b/blog-f0135.appspot.com/o/2020-04-05-banner-text-3.png?alt=media&token=c735b290-334c-4cb3-9e5d-2cd2e2356c2c" alt="Alt text"></p>
<p>連文字部分也跟著半透明啦！</p>
<p>接下來就是誤入歧途的開始，我瞭解上面的問題是因為 opaicity 調整了整個物件的透明度，於是我把 h1 用一個新的 div 包裹，在這個 div 設定白色背景和透明度，但是呈現畫面和上面一模一樣。</p>
<p>真是令人氣餒，不過意外的知道 opacity 不只會影響被設定的物件的透明度，還會連帶的影響子元素的視覺呈現效果，也算是有所收穫。</p>
<h3 id="rgba"><a href="#rgba" class="headerlink" title="rgba( )"></a>rgba( )</h3><p>折騰了半天，才知道在 <code>background-color</code> 使用 <code>rgba()</code> 的寫法，就可以解決這個問題了。寫法是</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">background</span>: <span class="built_in">rgba</span>(red, green, blue, alpha);</span><br></pre></td></tr></table></figure>
<p>首先依序填入紅、綠、藍三原色的色值，可以使用 0 ~ 255 的整數亮度寫法，或是用百分比 0% ~ 100% 來表示亮度。</p>
<p>接著 alpha 代表透明度，範圍從 0.0 ~ 1.0，0 是完全穿透，1 是不透明。</p>
<h3 id="linear-gradient"><a href="#linear-gradient" class="headerlink" title="linear-gradient( )"></a>linear-gradient( )</h3><p>後來瞭解到越來越多的 CSS 屬性設定和它們之間的關係，終於可以做出像這樣的橫幅了。</p>
<p><img src="https://firebasestorage.googleapis.com/v0/b/blog-f0135.appspot.com/o/2020-04-05-banner-text-1.png?alt=media&token=8020e6fb-6ab2-4033-89ef-61dbcf8ecff6" alt="alt text"></p>
<p>在接近狐狸頭部的部份讓底色消失，使整體更美觀。</p>
<p>這是在 <code>background-image</code> 使用 <code>linear-gradient()</code> 的效果。寫法是</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">background-image</span>: <span class="built_in">linear-gradient</span>(方向, 第一種顏色 範圍, 第二種顏色 範圍,...)</span><br></pre></td></tr></table></figure>

<p>以我這個橫幅來說</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">background-image</span>: <span class="built_in">linear-gradient</span>(to right, <span class="built_in">rgba</span>(<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>,<span class="number">0.5</span>) <span class="number">40%</span>, <span class="built_in">rgba</span>(<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>,<span class="number">0</span>) <span class="number">60%</span>);</span><br></pre></td></tr></table></figure>

<p>就是方向由左至右，到達漸變距離距離 40% 處會是 rgba(255,255,255,0.5) 這個顏色，到 60% 處會是 rgba(255,255,255,0.5) 這個顏色。</p>
<p>由於顏色線性漸變的方向不一定是水平或是垂直，也可以設定 deg 來呈現傾斜的線性漸變效果，因此顏色變化的範圍也不一定是元素的寬度或高度，而這個顏色變化的範圍被稱為漸變距離。</p>
<p>詳細的漸變距離計算方式可以參考 MDN web docs 在 linear-gradient 條目的 <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/linear-gradient#Composition_of_a_linear_gradient">Composition of a linear gradient</a> 這一段落。</p>
<p>最後，使用 linear-grdient 要注意一點，linear-gradient( ) 不能作用在 <code>background-color</code> 屬性，過去我因為習慣都用簡寫 <code>background</code> 屬性來設定各種背景資訊，以至於在不能使用簡寫的時候常犯這個錯誤。</p>
]]></content>
      <categories>
        <category>鼠年全馬鐵人挑戰</category>
      </categories>
      <tags>
        <tag>w3HexSchool</tag>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>鼠年全馬鐵人挑戰 04：自製 select 選單樣式（上）- 連結自製選項到原本的選單</title>
    <url>/blog/2020/04/12/2020-04-12-customed-select-box-1/</url>
    <content><![CDATA[<p>使用 HTML 的 select 與 option 標籤製作的下拉式選單，在每個瀏覽器有各自預設的樣式，即使用 <code>appearance: none;</code> 清掉瀏覽器預設樣式，在 CSS 使用上仍然有很大的限制，例如沒有辦法修改下拉選單周圍的 border 樣式。</p>
<p>在 w3schools <a href="https://www.w3schools.com/howto/howto_custom_select.asp">How TO - Custom Select Box</a> 這個條目下，有自製 select 選單的參考。</p>
<p>w3schools 的方法的優點，在於對原本 HTML 架構的調整非常少，並且 CSS 設定的部分就像是一般在設定其它元素的樣式一樣，可以自由的進行調整。運作原理是用 JS 產生新的、對應到原本 select、option 內容的 div 元素，之後用 CSS 隱藏原本的選單、控制新產生的 div 選單。</p>
<p>這篇文章主要參考 w3schools，加入自己實作的記錄，和對 w3schools 寫法的說明。</p>
<span id="more"></span>

<h3 id="用新的-custome-select-div-包裹原本的-select-標籤"><a href="#用新的-custome-select-div-包裹原本的-select-標籤" class="headerlink" title="用新的 custome-select div 包裹原本的 select 標籤"></a>用新的 custome-select div 包裹原本的 select 標籤</h3><p>首先考慮一個基本的 select、option 架構，以這個 <a href="https://codepen.io/bryanchu10/pen/LYpVpab">CodePen</a> 為例。</p>
<p>首先在原本的 select 外，加入一層 div，class 命名為 <code>custom-select</code>，如同這個 <a href="https://codepen.io/bryanchu10/pen/abvOveZ">CodePen</a>。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;custom-select&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span>&gt;</span>選項 1<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span>&gt;</span>選項 2<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span>&gt;</span>選項 3<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span>&gt;</span>選項 4<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span>&gt;</span>選項 5<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在 CSS 的部分設定</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.custom-select</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">font-family</span>: <span class="string">&#x27;PingFangTC&#x27;</span>, <span class="string">&#x27;微軟正黑體&#x27;</span>, sans-serif;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">margin-right</span>: auto;</span><br><span class="line">  <span class="attribute">margin-left</span>: auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>.custom-select</code> 作為 select 選單的最外層，可以拿來控制整個選單的位置和寬度。</p>
<h3 id="製作被選中的-select-選項"><a href="#製作被選中的-select-選項" class="headerlink" title="製作被選中的 select 選項"></a>製作被選中的 select 選項</h3><p>首先先建立變數</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> x, i, j, selElmnt, a, b, c;</span><br></pre></td></tr></table></figure>

<p>再來找到 HTML 文件中 class 名稱為 <code>custom-select</code> 的每一個元素，將它們放進變數 x 中。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">x = <span class="variable language_">document</span>.<span class="title function_">getElementsByClassName</span>(<span class="string">&quot;custom-select&quot;</span>);</span><br></pre></td></tr></table></figure>
<p>接著開始製作被選中的 select 選項</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; x.<span class="property">length</span>; i++) &#123;</span><br><span class="line">  selElmnt = x[i].<span class="title function_">getElementsByTagName</span>(<span class="string">&quot;select&quot;</span>)[<span class="number">0</span>];</span><br><span class="line">  a = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;DIV&quot;</span>);</span><br><span class="line">  a.<span class="title function_">setAttribute</span>(<span class="string">&quot;class&quot;</span>, <span class="string">&quot;select-selected&quot;</span>);</span><br><span class="line">  a.<span class="property">innerHTML</span> = selElmnt.<span class="property">options</span>[selElmnt.<span class="property">selectedIndex</span>].<span class="property">innerHTML</span>;</span><br><span class="line">  x[i].<span class="title function_">appendChild</span>(a);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>建立一個 for迴圈，輪流跑過每一個被放到變數 x 中的 custom-select，使得頁面上每一個 custom-select 都可以設定到。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">selElmnt = x[i].<span class="title function_">getElementsByTagName</span>(<span class="string">&quot;select&quot;</span>)[<span class="number">0</span>];</span><br></pre></td></tr></table></figure>

<p>找到 x[i] 內部 select 標籤，將它丟到 selElmnt 中，之後就可以用 selElmnt 呼叫原本的 select。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">a = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;DIV&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>產生一個新的 div 元素放進變數 a 中。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">a.<span class="title function_">setAttribute</span>(<span class="string">&quot;class&quot;</span>, <span class="string">&quot;select-selected&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>分配一個名為 <code>select-selected</code> 的 class 給剛剛產生的 div 元素。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">a.<span class="property">innerHTML</span> = selElmnt.<span class="property">options</span>[selElmnt.<span class="property">selectedIndex</span>].<span class="property">innerHTML</span>;</span><br></pre></td></tr></table></figure>

<p>在 select-selected 放入內部 HTML 內容，這個內容是原本的 select 中被選擇到的 option 的內容。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">x[i].<span class="title function_">appendChild</span>(a);</span><br></pre></td></tr></table></figure>

<p>把我們剛剛丟到變數 a 裡面的內容，掛到 x[i] 的下一層。</p>
<p>還記得 x[i] 是我們一開始找到的頁面上的 custom-select div 嗎？所以到這一步，我們已經將原本 select option 選中的內容丟到 select-selected 裡面，然後新增在 custom-select 下方了。</p>
<p>接著我們可以撰寫 CSS 內容</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.select-selected</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#ffffff</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#000000</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">2px</span> <span class="number">2px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#000000</span>;</span><br><span class="line">  <span class="attribute">cursor</span>: pointer;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我們可以在 <code>.select-selected</code> 設計被選擇的選項的樣式。</p>
<p>目前狀態如這個 <a href="https://codepen.io/bryanchu10/pen/BaoNjKG">CodePen</a>。</p>
<h3 id="製作選項內容"><a href="#製作選項內容" class="headerlink" title="製作選項內容"></a>製作選項內容</h3><p>接下來準備製作選項內容，在迴圈中加入</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">b = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;DIV&quot;</span>);</span><br><span class="line">b.<span class="title function_">setAttribute</span>(<span class="string">&quot;class&quot;</span>, <span class="string">&quot;select-items select-hide&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>這一段的內容和前面方法類似，這一次產生 class 為 <code>select-items</code> 的 div 先放到變數 b 當中。</p>
<p>接下來寫第二層 for 迴圈的內容</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; selElmnt.<span class="property">length</span>; j++) &#123;</span><br><span class="line">  c = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;DIV&quot;</span>);</span><br><span class="line">  c.<span class="property">innerHTML</span> = selElmnt.<span class="property">options</span>[j].<span class="property">innerHTML</span>;</span><br><span class="line">  b.<span class="title function_">appendChild</span>(c);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>和變數 a 類似，我們利用迴圈新增多個 div，內容會是原本的 select 中的 option 內容。最後掛到變數 b 下面，也就是 select-items 下方。</p>
<p>然後回到第一層迴圈內部</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">x[i].<span class="title function_">appendChild</span>(b);</span><br></pre></td></tr></table></figure>

<p>將變數 b 掛在 x[i] 下方。</p>
<p>到這裡我們做出了一個新的選單內容，可以在 .select-items 設定整體的背景，在 .select-items div 設定每個選項的樣式。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.select-items</span> <span class="selector-tag">div</span>, <span class="selector-class">.select-selected</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#ffffff</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#000000</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">2px</span> <span class="number">2px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#000000</span>;</span><br><span class="line">  <span class="attribute">cursor</span>: pointer;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.select-items</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#ffffff</span>;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">z-index</span>: <span class="number">99</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>目前狀態如這個 <a href="https://codepen.io/bryanchu10/pen/qBOdNdW">CodePen</a></p>
<h3 id="點擊自製選項改變原本選單被選擇選項"><a href="#點擊自製選項改變原本選單被選擇選項" class="headerlink" title="點擊自製選項改變原本選單被選擇選項"></a>點擊自製選項改變原本選單被選擇選項</h3><p>接下來我們要在點擊自製的選單的時候，可以改變那一個選單所在的 custom-select 裡面，原本被選擇的 select 選項。</p>
<p>在第二層迴圈內部寫上對變數 c 的監聽事件，也就是對自製的選單選項的點擊事件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">c.<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> y, i, k, s, h;</span><br><span class="line">  s = <span class="variable language_">this</span>.<span class="property">parentNode</span>.<span class="property">parentNode</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&quot;select&quot;</span>)[<span class="number">0</span>];</span><br><span class="line">  h = <span class="variable language_">this</span>.<span class="property">parentNode</span>.<span class="property">previousSibling</span>;</span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; s.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (s.<span class="property">options</span>[i].<span class="property">innerHTML</span> == <span class="variable language_">this</span>.<span class="property">innerHTML</span>) &#123;</span><br><span class="line">      s.<span class="property">selectedIndex</span> = i;</span><br><span class="line">      h.<span class="property">innerHTML</span> = <span class="variable language_">this</span>.<span class="property">innerHTML</span>;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>新增完變數 y, i, k, s, h 後</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">s = <span class="variable language_">this</span>.<span class="property">parentNode</span>.<span class="property">parentNode</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&quot;select&quot;</span>)[<span class="number">0</span>];</span><br></pre></td></tr></table></figure>

<p>從選擇的選項回到它父層的父層節點，也就是被選擇的選項所在的 custom-select，把這一個 custom-select 下層的 select 丟到 s 變數中。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">h = <span class="variable language_">this</span>.<span class="property">parentNode</span>.<span class="property">previousSibling</span>;</span><br></pre></td></tr></table></figure>

<p>將選擇的選項的父節點的前一個同層同標籤的元素丟到變數 h 裡面，其實就是前面自製的 select-selected。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; s.<span class="property">length</span>; i++) &#123;</span><br><span class="line">  <span class="keyword">if</span> (s.<span class="property">options</span>[i].<span class="property">innerHTML</span> == <span class="variable language_">this</span>.<span class="property">innerHTML</span>) &#123;</span><br><span class="line">    s.<span class="property">selectedIndex</span> = i;</span><br><span class="line">    h.<span class="property">innerHTML</span> = <span class="variable language_">this</span>.<span class="property">innerHTML</span>;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>再次讓迴圈登場，走過 select 每一個選項，如果跟點擊的選項內容一致，就把當前迴圈數當做新的 selectedIndex 派給 select，達成修改原本被選擇選項的效果。同時修改自製的 select-selected 內容。最後跳出迴圈。</p>
<p>到這邊狀態如這個 <a href="https://codepen.io/bryanchu10/pen/GRpJqQv">CodePen</a>，完成了自製選項到原本的選單的連結。</p>
]]></content>
      <categories>
        <category>鼠年全馬鐵人挑戰</category>
      </categories>
      <tags>
        <tag>JS</tag>
        <tag>w3HexSchool</tag>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>鼠年全馬鐵人挑戰 05：自製 select 選單樣式（下）- 選單展開收闔</title>
    <url>/blog/2020/04/19/2020-04-19-customed-select-box-2/</url>
    <content><![CDATA[<p><a href="https://bryanchu10.github.io/blog/2020/04/12/2020-04-12-%20customed-select-box-1/">上次</a>我們參考 w3schools <a href="https://www.w3schools.com/howto/howto_custom_select.asp">How To - Custom Select Box</a> 的教學自製 select 選單樣式，將自製的選單選項連結到原本的選項，使得我們點擊自製選單的選項的時候，原本的選項可以跟跟著變化。這次我們要完成選單展開收闔的 JS 撰寫。</p>
<span id="more"></span>

<h3 id="點擊-select-選單「已選擇」部分收闔選單"><a href="#點擊-select-選單「已選擇」部分收闔選單" class="headerlink" title="點擊 select 選單「已選擇」部分收闔選單"></a>點擊 select 選單「已選擇」部分收闔選單</h3><p>首先，我們先在 CSS 部分消除自設的展開選單：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.select-hide</span>&#123;</span><br><span class="line">  <span class="attribute">display</span>: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>接著，在上次 JS <code>x[i].appendChild(b);</code> 的後面加上這段 JS</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">a.<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span><br><span class="line">  e.<span class="title function_">stopPropagation</span>();</span><br><span class="line">  <span class="title function_">closeAllSelect</span>(<span class="variable language_">this</span>);</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">nextSibling</span>.<span class="property">classList</span>.<span class="title function_">toggle</span>(<span class="string">&quot;select-hide&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>a 是我們上次製作的，在 .custom-select 之下的 .select-selected。用 <code>e.stopPropagation();</code> 阻止預設的動作發生。再來我們先寫一個 closeAllSelect() 函數，這個函數的預期功能是要關閉畫面上所有的自設 select 選單。最後 <code>this.nextSibling.classList.toggle(&quot;select-hide&quot;);</code> 讓當前點擊的節點的下一個節點，也就是同在 .custom-select 下也是 div 標籤的 .select-items，因應是否有 select-hide 這個 class 存在，決定加上或消除這個 class。</p>
<p>接下來是 closeAllSelect() 函數的製作</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">closeAllSelect</span>(<span class="params">elmnt</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> x, y, i, arrNo = [];</span><br><span class="line">  x = <span class="variable language_">document</span>.<span class="title function_">getElementsByClassName</span>(<span class="string">&quot;select-items&quot;</span>);</span><br><span class="line">  y = <span class="variable language_">document</span>.<span class="title function_">getElementsByClassName</span>(<span class="string">&quot;select-selected&quot;</span>);</span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; y.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (elmnt == y[i]) &#123;</span><br><span class="line">      arrNo.<span class="title function_">push</span>(i);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; x.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (arrNo.<span class="title function_">indexOf</span>(i)) &#123;</span><br><span class="line">      x[i].<span class="property">classList</span>.<span class="title function_">add</span>(<span class="string">&quot;select-hide&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>因為 w3schools 的寫法可以一次對整個頁面上所有的自設選單運作，在關閉所有的選單的部分，JS 的處理顯得特別有趣。</p>
<p>雖然說「關閉所有的選單」，但是其實不包括當前這點擊的這一個，當前點擊的這一個如剛剛提到的，是使用 <code>this.nextSibling.classList.toggle(&quot;select-hide&quot;);</code> 完成狀態的改變。</p>
<p>回到新的這段 JS，那 w3schools 怎麼略過當前的選單呢？它使用了兩個迴圈，第一個迴圈走過頁面上所有的 .select-selected。走過當前點擊的那一個時，會把當前的迴圈數值丟到矩陣中，以下為了方便說明，稱為編號。</p>
<p>第二個迴圈則去走過跟 .select-items 數量一樣多的迴圈數，<code>arrNo.indexOf(i)</code> 是判斷該圈的編號值在矩陣裡的第幾個，如果沒有的話，回傳的值是 -1。由於只有當前被點擊的那一個編號有被放到矩陣裡面，所以在除了跟點擊的 .select-selected 同一編號迴圈以外的 <code>arrNo.indexOf(i)</code> 回傳值全部都是 -1；有被放進矩陣裡面的編號因為是唯一一個，回傳值一定是 0，表示在第 0 個。這就是最有趣的地方了，<strong>當 if 內的值是 -1 的時候， if 的命令會被執行；當 if 內的值是 0 的時候， if 的命令不會被執行</strong>，所以在沒有和當前選擇的那一個 .select-selected 並列的 .select-items 都會被加上 select-hide 這個 class。</p>
<p>這樣一來，只要點擊 select 選單「已選擇」部分，畫面上除了當前點擊的選單以外的選單都會進入關閉狀態。</p>
<p>多個選單存在於畫面上比較容易看出效果，目前狀態如這個 <a href="https://codepen.io/bryanchu10/pen/ExVydXP">CodePen</a>。</p>
<h3 id="補上其它-JS-動作"><a href="#補上其它-JS-動作" class="headerlink" title="補上其它 JS 動作"></a>補上其它 JS 動作</h3><h4 id="點擊畫面其它地方"><a href="#點擊畫面其它地方" class="headerlink" title="點擊畫面其它地方"></a>點擊畫面其它地方</h4><p>點擊話畫面其它地方的時候，選單應該也會收闔，所以 JS 尾端加上</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, closeAllSelect);</span><br></pre></td></tr></table></figure>

<h4 id="選單初始狀態"><a href="#選單初始狀態" class="headerlink" title="選單初始狀態"></a>選單初始狀態</h4><p>選單一開始應該是收闔的狀態，上次我們產生新的 div 元素放進變數 b 的時候，我們是寫</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">b = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;DIV&quot;</span>);</span><br><span class="line">b.<span class="title function_">setAttribute</span>(<span class="string">&quot;class&quot;</span>, <span class="string">&quot;select-items select-hide&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>不過為了方便呈現目前的狀態，在 CodePen 一直沒有加上 select-hide 這個 class，現在我們把它加回去，讓選單一開始是收闔的狀態。</p>
<h3 id="最後的樣式調整"><a href="#最後的樣式調整" class="headerlink" title="最後的樣式調整"></a>最後的樣式調整</h3><p>最後在 CSS 部分</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.custom-select</span> select &#123;</span><br><span class="line">  <span class="attribute">display</span>: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>將原本的選單消除。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.select-items</span> <span class="selector-tag">div</span><span class="selector-pseudo">:hover</span>&#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#1e90ff</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#ffffff</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>加入 hover 的樣式。</p>
<p>接下來，select 選單應該還會有目前選擇的項目的提示，所以我們先增加一個 .active 選擇器在 CSS 中。目前選擇的項目的提示經常和 hover 的樣式是一樣的，所以我們設定一樣的樣式：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.select-items</span> <span class="selector-class">.active</span>&#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#1e90ff</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#ffffff</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>最後透過 JS 加入 .active 選擇器到被選擇的選項上。位置在 <code>h.innerHTML = this.innerHTML;</code> 之後：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">y = <span class="variable language_">this</span>.<span class="property">parentNode</span>.<span class="title function_">getElementsByClassName</span>(<span class="string">&quot;active&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (k = <span class="number">0</span>; k &lt; y.<span class="property">length</span>; k++) &#123;</span><br><span class="line">  y[k].<span class="title function_">removeAttribute</span>(<span class="string">&quot;class&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">this</span>.<span class="title function_">setAttribute</span>(<span class="string">&quot;class&quot;</span>, <span class="string">&quot;active&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>先找到同一節點下所有帶有 “active” class 的元素，刪除 class 屬性之後，在當前選擇的選項補回 “active” class。</p>
<p>預設第一個選項是被選擇的狀態，所以在創造自製選項的 <code>c = document.createElement(&quot;DIV&quot;);</code> 後方加入</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (j == <span class="number">0</span>)&#123;</span><br><span class="line">  c.<span class="title function_">setAttribute</span>(<span class="string">&quot;class&quot;</span>, <span class="string">&quot;active&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>讓第一個選項一開始就帶有 active 的 class 以呈現其樣式。</p>
<p>到此完成了可以自行設計各部分 CSS 樣式的自製 select 選單，如這個 <a href="https://codepen.io/bryanchu10/pen/rNOLPOX">CodePen</a> 。</p>
<p>參考資料：<a href="https://www.w3schools.com/howto/howto_custom_select.asp">w3schools: How TO - Custom Select Box</a></p>
]]></content>
      <categories>
        <category>鼠年全馬鐵人挑戰</category>
      </categories>
      <tags>
        <tag>JS</tag>
        <tag>w3HexSchool</tag>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>鼠年全馬鐵人挑戰 06：假如 span 遇上 border-right？</title>
    <url>/blog/2020/04/26/2020-04-26-span-border/</url>
    <content><![CDATA[<p>這週在回答關於 CSS 排版的提問的時候，碰到一個有趣的問題，先上 <a href="https://codepen.io/bryanchu10/pen/abvJJEV">CodePen</a>。</p>
<p><img src="https://firebasestorage.googleapis.com/v0/b/blog-f0135.appspot.com/o/2020-04-26-span-border-1.png?alt=media&token=c2c047e1-12c9-4350-9892-f9a63248d195" alt="Alt text"></p>
<p>提問者的設計大概像這個 CodePen，連結列選項之間的分隔線沒有像 a 標籤的 hover 範圍高度那麼高，所以用 li 或 a 標籤的 border-right 無法作出這個設計。他的選項的文字包在 span 標籤中，用其中一個選項的 span 做出和文字高度相同的分隔線。</p>
<p>先不論使用 span 來作分隔線是否是最佳選擇，提問者的問題是：為甚麼 border-right 沒有辦法和文字一樣高？</p>
<span id="more"></span>

<h3 id="line-height-無法影響-border-高度"><a href="#line-height-無法影響-border-高度" class="headerlink" title="line-height 無法影響 border 高度"></a>line-height 無法影響 border 高度</h3><p>第一時間我認為原因是圖片對齊文字的 baseline，沒有對齊 bottom，造成整個行列的高度受到影響，而 span 高度受整個行列高度影響，所以比文字還高。但是用開發者檢視工具看過之後發現 span 是純粹和文字互動，span 的高度就是比文字高。</p>
<p><img src="https://firebasestorage.googleapis.com/v0/b/blog-f0135.appspot.com/o/2020-04-26-span-border-2.png?alt=media&token=df67c1b0-7111-4097-9157-d81e835626d6" alt="Alt text"></p>
<p>我知道 span 是行內元素，只要讓它帶有區塊元素特性（轉成區塊元素，或是讓它浮動），border-right 的高度就一定會和盒模型高度相同。但是我想說 border-right 的高度應該是行內元素決定的，行內元素的高度又是 <code>line-height</code> 決定的，那麼應該實驗一下，設定了 <code>line-height</code> 的屬性值，是不是可以控制 border-right 的高度？</p>
<p>結果竟然不行！（因為怕侵犯圖片版權，請自行腦補一張貓咪驚嚇的梗圖）。</p>
<h3 id="字體是關鍵"><a href="#字體是關鍵" class="headerlink" title="字體是關鍵"></a>字體是關鍵</h3><p>我知道行內元素很多詭異的空間表現，都和文字的特性有關，像是圖片預設對齊 baseline 之類的等等。於是我靈機一動，難道現在 border-right 和文字高度不一致，竟然是字體的空隙嗎？於是我試著換上字面和字身設計幾乎一樣高的新細明體，果然 border-right 高度變成和文字一樣高了。</p>
<p><img src="https://firebasestorage.googleapis.com/v0/b/blog-f0135.appspot.com/o/2020-04-26-span-border-3.png?alt=media&token=d7a30fe5-201e-4a0e-b90d-38895201e2d4" alt="Alt text"></p>
<p>border-right 本身是吃文字字身高度這件事可以理解，但是 line-height 無法影響 border-right 的高度讓我非常驚訝！試著找了一下關於 border 的說明文件，有沒有不建議使用在行內元素這一項，似乎也沒有。那麼，這真的是一個使用上要特別注意的小細節呢！</p>
<h3 id="border-在行內元素出現的場合"><a href="#border-在行內元素出現的場合" class="headerlink" title="border 在行內元素出現的場合"></a>border 在行內元素出現的場合</h3><p>一開始我很難接受 border 高度和 <code>line-height</code> 無關的現象，但是後來想到在文件編排中有的時候會出現這樣的效果：</p>
<p><img src="https://firebasestorage.googleapis.com/v0/b/blog-f0135.appspot.com/o/2020-04-26-span-border-4.png?alt=media&token=9547d1dd-911a-40c6-a0bb-3325bedcfffc" alt="Alt text"></p>
<p>突然理解了為甚麼要設計 border 高度和 <code>line-height</code> 無關，在需要圈住文字的應用場合，border 高度和 <code>line-height</code> 無關反而才是我們想要的呈現方式。</p>
<h3 id="補充資料"><a href="#補充資料" class="headerlink" title="補充資料"></a>補充資料</h3><p>關於字面、字身的介紹，可以參考 justfont 的部落格文章<a href="https://blog.justfont.com/2012/12/hanzi-type-design-1/">字型設計自己來─中文字型設計的第一課</a>。</p>
]]></content>
      <categories>
        <category>鼠年全馬鐵人挑戰</category>
      </categories>
      <tags>
        <tag>w3HexSchool</tag>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>鼠年全馬鐵人挑戰 07：預設 VS Code 新檔案使用語法</title>
    <url>/blog/2020/05/03/2020-05-03-doc-language-setting/</url>
    <content><![CDATA[<p>有的時候想快速用 VS Code 寫個 HTML 檔案，常常快捷鍵 Ctrl + N 之後，就想打驚嘆號，透過 Emmet 快速產生 HTML 的基礎樣板。然後就發現沒有作用，因為這個新檔案格式未定，Emmet 無法判斷要幫你用哪一套縮寫系統。</p>
<p>那 VS Code 能不能在產生新檔案的時候，就先預設好使用的語言呢？當然可以，地表最強編輯器可不是浪得虛名的，只有你還沒想到的功能，沒有 VS Code 做不到的功能。</p>
<span id="more"></span>

<h3 id="進入全域設置-setting-json"><a href="#進入全域設置-setting-json" class="headerlink" title="進入全域設置 setting.json"></a>進入全域設置 setting.json</h3><p>用過一陣子 VS Code 的人，應該都知道有一個叫做 setting.json 的檔案，以 json 的格式寫了各種設定，透過對這個檔案進行修改，就可以控制各種套件和 VS Code 內建的功能，達成客製專屬編輯器的目的。</p>
<p>我剛開始用 VS Code 的時候，VS Code 的設定介面比較偏向工程端，赤裸裸的讓你看到工作區域設定、全域設定等等，然後一不小心就會進入各自的 setting.json 檔案。對於新手不是很友善，一不小心就會改壞預設設定。</p>
<p>後來 VS Code 設定界面變得非常親民，非常貼近一般軟體的設定介面，有說明、選單、空格等等，只要按照說明就可以透過選擇選項、填上數值，來做到一些簡單的設定。</p>
<p>不過因為可以調整的設定太多，整個界面很大，每次找我要的設定都要找一下下，雖然有搜尋系統，但還是沒有像直接修改 setting.json 那麼方便，所以我比較喜歡直接到 setting.json 檔案去進行設定，</p>
<p>但是糟糕的是，從某一次更新開始，我竟然找不到進入全域 setting.json 的途徑了，每次都隨便亂按，從某個有提供連結的部分連過去。</p>
<p>剛好趁這個機會，我也認真地摸索一下怎麼樣到 setting.json 比較快。</p>
<ol>
<li>點擊左下角齒輪，選擇「設定」</li>
</ol>
<p><img src="https://firebasestorage.googleapis.com/v0/b/blog-f0135.appspot.com/o/2020-05-03-doc-language-setting-1.png?alt=media&token=61077fa3-bef1-415b-869f-55645373bbb8" alt="Alt text"></p>
<ol start="2">
<li>點擊右上角文件圖案進入 setting.json</li>
</ol>
<p><img src="https://firebasestorage.googleapis.com/v0/b/blog-f0135.appspot.com/o/2020-05-03-doc-language-setting-2.png?alt=media&token=f0410c03-9221-41bc-a30a-57be43bfb5a1" alt="Alt text"></p>
<p>原來 json.setting 的連結跑到右上角的文件圖案裡面了！</p>
<h3 id="更改-setting-json"><a href="#更改-setting-json" class="headerlink" title="更改 setting.json"></a>更改 setting.json</h3><p>加入預設文件語言類型設定 <code>&quot;files.defaultLanguage&quot;: &quot;html&quot;</code></p>
<p><img src="https://firebasestorage.googleapis.com/v0/b/blog-f0135.appspot.com/o/2020-05-03-doc-language-setting-3.png?alt=media&token=6a208186-9acc-438d-8b53-019c377f352f" alt="Alt text"></p>
<p>記得上一個設定的結尾如果沒有「,」的話要補上，才不會發生 json 格式錯誤。</p>
<p>這樣一來，直接開新檔案的時候，即使沒有副檔名，預設就是使用 HTML 語法了，Emmet 也可以順利使用。</p>
<p>不過我自己在撰寫上更常發生的狀況是，網頁寫一寫，要新增一個 HTML 或 SCSS。這時候還有一個更方便的設定方式，就是 <code>&quot;files.defaultLanguage&quot;: &quot;$&#123;activeEditorLanguage&#125;&quot;</code>，使用這個設定值的話，新開的檔案格式就會和目前使用的檔案格式相同，和實際需要的情境更接近。</p>
]]></content>
      <categories>
        <category>鼠年全馬鐵人挑戰</category>
      </categories>
      <tags>
        <tag>w3HexSchool</tag>
        <tag>VS Code</tag>
      </tags>
  </entry>
  <entry>
    <title>鼠年全馬鐵人挑戰 08：自己的世界觀</title>
    <url>/blog/2020/05/10/2020-05-10-world-view/</url>
    <content><![CDATA[<p>本週的馬拉松文決定以心情抒發為主題。根據六角馬拉松的規則，心情抒發的文章不能超過 20%，在我的精算<del>偷懶</del>之下，每 8 週可以有一次比較輕鬆的文章撰寫。這一週決定分享一下自己學習網頁撰寫過程中，影響我很大的一個想法──以自己的世界觀去理解語法運作。</p>
<span id="more"></span>

<h3 id="自己的世界觀"><a href="#自己的世界觀" class="headerlink" title="自己的世界觀"></a>自己的世界觀</h3><p>這個想法是某一次查詢資料的時候作者提到的，已經不記得是在哪一篇文章看到的了。簡單的說，在學習語法上，不用去拘泥於所謂正確的程式運作原理，應該去形成自己的理解。舉一個簡單的例子來說，我們知道，在父元素與第一個或最後一個子元素向同一個方向 margin，並且沒有使用 border 時，會發生 margin collapse。</p>
<p>直接觀察上述的情況，可以理解為在「在元素界線不明確」的時候，可能會發生我泥中有你，你泥中有我的狀況。一旦有了 border 之後，界線變得明確，兩者之間就不會有 margin 重疊了。</p>
<p>這是一個用直觀現像理解與解釋非常簡單的例子。大部分的人都只熟悉在甚麼樣的情況下會發生 margin collapse，沒有辦法說明為甚麼網頁撰寫設計上會有這樣的一個坑。</p>
<p>但是世界照常運轉，不知道這件事，並不影響我們對於後續知識的學習與應用。嚴格來說，也沒有人可以說你的解釋是錯誤的，因為在你的說法之下，的確可以準確地預測出會發生 margin collapse 的狀況。這就是形成一套自己的世界觀和解釋。</p>
<h3 id="重塑世界觀"><a href="#重塑世界觀" class="headerlink" title="重塑世界觀"></a>重塑世界觀</h3><p>然而，如果有一天，有人問到：為甚麼父元素使用 flex 排版的時候，父元素與第一個&#x2F;最後一個子元素向同一個方向 margin，沒有使用 border 時，也不會發生 margin collapse 呢？</p>
<p>這時候，原本的「元素界線不明確論」就受到挑戰。但是你又想到，在 flex 排版時，子元素會有 flex 內元件屬性，這些屬性還會分配父元素內部的空間。也就是說，在 flex 排版下，父元素的內部空間是被明確計算出來的。於是提出空間掌握理論：當使用到牽涉父元素內部空間定義的語法時，子元素的 margin 和父元素的 margin 就不會發生重疊，因為父元素內部空間被掌握、規範了。</p>
<p>使用 border 的時候，一定是明確了父元素內部空間範圍，才畫的出 border 的位置。藉由解釋力更強的說法，成功的涵蓋新的現象和之前的現象。</p>
<p>在學習的過程中，隨著碰到的案例漸漸地增多，自己的世界觀也會不斷地進行重塑，最後會變得越來越完善，甚至會發現靠近基於語法設計之初的原因。然而，比起一開始就直接生硬的吃下自己不能理解的程式面的解釋，在學習過程中不斷地確認、修正自己的理解，因為走過了探索的過程，體會和印象會更深刻。</p>
]]></content>
      <categories>
        <category>鼠年全馬鐵人挑戰</category>
      </categories>
      <tags>
        <tag>w3HexSchool</tag>
      </tags>
  </entry>
</search>
